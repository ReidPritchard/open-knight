@startuml

' For SQLite, typical types are: INTEGER, TEXT, REAL, BLOB
' We can approximate DECIMAL with REAL.
' For JSONB-like storage, we use TEXT to store JSON in SQLite.

entity Player {
    * player_id : INTEGER
    --
    name : TEXT
    elo_rating : INTEGER
    country : TEXT         // no strict CHAR(3)
    created_at : TEXT      // store timestamps as TEXT or NUMERIC
    updated_at : TEXT
}

entity Tournament {
    * tournament_id : INTEGER
    --
    name : TEXT
    type : TEXT
    start_date : TEXT       // can store as TEXT YYYY-MM-DD
    end_date : TEXT
    location : TEXT
}

entity Opening {
    * opening_id : INTEGER
    --
    eco_code : TEXT         // store as TEXT, no strict char(3)
    name : TEXT
    variation : TEXT
}

entity Game {
    * game_id : INTEGER
    --
    white_player_id : INTEGER
    black_player_id : INTEGER
    tournament_id : INTEGER
    opening_id : INTEGER
    result : TEXT          // '1-0','0-1','1/2-1/2','*'
    round_number : INTEGER
    date_played : TEXT     // e.g. '2024-05-01'
    fen : TEXT             // optional final or initial position
    pgn : TEXT             // optional for full PGN
    created_at : TEXT
}

entity Position {
    * position_id : INTEGER
    --
    fen : TEXT
    fen_hash : TEXT        // optional for indexing/deduplication
    created_at : TEXT
}

entity Move {
    * move_id : INTEGER
    --
    game_id : INTEGER
    parent_move_id : INTEGER
    move_number : INTEGER
    player_color : TEXT    // 'W' or 'B'
    move_notation : TEXT
    position_id : INTEGER
    created_at : TEXT
}

entity Annotation {
    * annotation_id : INTEGER
    --
    move_id : INTEGER
    user_id : INTEGER
    comment : TEXT
    arrows : TEXT          // store JSON data as TEXT
    highlights : TEXT      // store JSON data as TEXT
    created_at : TEXT
}

entity Evaluation {
    * evaluation_id : INTEGER
    --
    position_id : INTEGER
    evaluation_score : REAL       // approximate decimal(5,2)
    evaluation_type : TEXT        // e.g. 'cp' or 'mate'
    depth : INTEGER
    engine_name : TEXT
    created_at : TEXT
}

entity MoveTimeTracking {
    * time_tracking_id : INTEGER
    --
    move_id : INTEGER
    time_spent_ms : INTEGER
    time_left_ms : INTEGER
    created_at : TEXT
}

entity Tag {
    * tag_id : INTEGER
    --
    name : TEXT
    description : TEXT
}

entity GameTag {
    * game_tag_id : INTEGER
    --
    game_id : INTEGER
    tag_id : INTEGER
}

entity MoveTag {
    * move_tag_id : INTEGER
    --
    move_id : INTEGER
    tag_id : INTEGER
}

' Relationships (SQLite foreign keys require PRAGMA foreign_keys = ON, but we'll still represent them logically):

Player ||--o{ Game : "white_player_id"
Player ||--o{ Game : "black_player_id"
Tournament ||--o{ Game : "tournament_id"
Opening ||--o{ Game : "opening_id"
Game ||--o{ Move : "game_id"
Move }|--|{ Move : "parent_move_id"
Move ||--o{ Annotation : "move_id"
Position ||--o{ Move : "position_id"
Position ||--o{ Evaluation : "position_id"
Move ||--o{ MoveTimeTracking : "move_id"
Tag ||--o{ GameTag : "tag_id"
Game ||--o{ GameTag : "game_id"
Tag ||--o{ MoveTag : "tag_id"
Move ||--o{ MoveTag : "move_id"

@enduml
