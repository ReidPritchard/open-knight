//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tag")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub tag_id: i32,
    #[sea_orm(unique)]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::game_tag::Entity")]
    GameTag,
    #[sea_orm(has_many = "super::move_tag::Entity")]
    MoveTag,
}

impl Related<super::game_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameTag.def()
    }
}

impl Related<super::move_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MoveTag.def()
    }
}

impl Related<super::game::Entity> for Entity {
    fn to() -> RelationDef {
        super::game_tag::Relation::Game.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::game_tag::Relation::Tag.def().rev())
    }
}

impl Related<super::r#move::Entity> for Entity {
    fn to() -> RelationDef {
        super::move_tag::Relation::Move.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::move_tag::Relation::Tag.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
