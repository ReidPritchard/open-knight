//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "annotation")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub annotation_id: i32,
    pub move_id: i32,
    pub user_id: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub comment: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub arrows: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub highlights: Option<String>,
    pub created_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::r#move::Entity",
        from = "Column::MoveId",
        to = "super::r#move::Column::MoveId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Move,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::UserId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::r#move::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Move.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
