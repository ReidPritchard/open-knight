//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "move")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub move_id: i32,
    pub game_id: i32,
    pub ply_number: i32,
    pub san: String,
    pub uci: String,
    pub position_id: i32,
    pub created_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::annotation::Entity")]
    Annotation,
    #[sea_orm(
        belongs_to = "super::game::Entity",
        from = "Column::GameId",
        to = "super::game::Column::GameId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Game,
    #[sea_orm(has_many = "super::move_tag::Entity")]
    MoveTag,
    #[sea_orm(has_many = "super::move_time_tracking::Entity")]
    MoveTimeTracking,
    #[sea_orm(
        belongs_to = "super::position::Entity",
        from = "Column::PositionId",
        to = "super::position::Column::PositionId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Position,
}

impl Related<super::annotation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Annotation.def()
    }
}

impl Related<super::game::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Game.def()
    }
}

impl Related<super::move_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MoveTag.def()
    }
}

impl Related<super::move_time_tracking::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MoveTimeTracking.def()
    }
}

impl Related<super::position::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Position.def()
    }
}

impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        super::move_tag::Relation::Tag.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::move_tag::Relation::Move.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
