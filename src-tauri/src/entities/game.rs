//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "game")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub game_id: i32,
    pub white_player_id: i32,
    pub black_player_id: i32,
    pub tournament_id: Option<i32>,
    pub opening_id: Option<i32>,
    pub result: Option<String>,
    pub termination: Option<String>,
    pub round_number: Option<i32>,
    pub date_played: Option<String>,
    pub time_control: Option<String>,
    pub fen: Option<String>,
    pub pgn: String,
    pub created_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::game_tag::Entity")]
    GameTag,
    #[sea_orm(has_many = "super::r#move::Entity")]
    Move,
    #[sea_orm(
        belongs_to = "super::opening::Entity",
        from = "Column::OpeningId",
        to = "super::opening::Column::OpeningId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Opening,
    #[sea_orm(
        belongs_to = "super::player::Entity",
        from = "Column::BlackPlayerId",
        to = "super::player::Column::PlayerId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Player2,
    #[sea_orm(
        belongs_to = "super::player::Entity",
        from = "Column::WhitePlayerId",
        to = "super::player::Column::PlayerId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Player1,
    #[sea_orm(
        belongs_to = "super::tournament::Entity",
        from = "Column::TournamentId",
        to = "super::tournament::Column::TournamentId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tournament,
}

impl Related<super::game_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameTag.def()
    }
}

impl Related<super::r#move::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Move.def()
    }
}

impl Related<super::opening::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Opening.def()
    }
}

impl Related<super::tournament::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tournament.def()
    }
}

impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        super::game_tag::Relation::Tag.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::game_tag::Relation::Game.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
